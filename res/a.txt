// vertices of a quad
//  2-------3
//  |  \    |
//  |   \   |  y+ 
//  |     \ | | uv_coord
//  0-------1 +-> x+  

void init_vert_data(){
    uint quad_id = gl_VertexIndex >> 2; // divide the global vertex index by 4 to get the quad index
    uint vert_index = gl_VertexIndex & 0x3; // get the vertex index within the quad (0-3)

    uvec2 data = compressed_quads[quad_id]; // get the compressed data of the quad
    uint data_0 = data.x; // extract the first 32 bits of data
    vpos.x = (data_0      ) & 31; // extract the x position using bitwise operations
    vpos.y = (data_0 >>  5) & 31; // extract the y position using bitwise operations
    vpos.z = (data_0 >> 10) & 31; // extract the z position using bitwise operations

    uint direction = (data_0 >> 15) & 7; // extract the direction (0-6) of the quad's normal
    uint material  = (data_0 >> 18); // extract the material of the quad

    vec2 texture_size = vec2(1.0 / 16.0,1); // size of the texture
    v_uv = vec2(float(material) * texture_size.x,0); // set the initial uv coordinate based on material

    uint offset_axies_uvx[6] = {1,2,2,0,0,1}; // used to determine which axis the uv x coordinate should be offset based on direction
    uint offset_axies_uvy[6] = {2,1,0,2,1,0}; // used to determine which axis the uv y coordinate should be offset based on direction
    
    if ((vert_index & 1) != 0){ // if the vertex is 1 or 3, offset the uv x coordinate
        v_uv.x += texture_size.x;

        vpos[offset_axies_uvx[direction]] += 1.0; // offset the corresponding axis based on direction
    }

    if((vert_index >> 1) != 0){ // if the vertex is 2 or 3, offset the uv y coordinate
        v_uv.y += texture_size.y;

        vpos[offset_axies_uvy[direction]] += 1.0; // offset the corresponding axis based on direction
    }

    // if the direction is positive, add 1 to the axis of it 
    vpos[direction >> 1] += (1 - (direction & 1));

    vec3 normal_table[6] = {
        vec3( 1.0, 0.0, 0.0), // positive x direction
        vec3(-1.0, 0.0, 0.0), // negative x direction
        vec3( 0.0, 1.0, 0.0), // positive y direction
        vec3( 0.0,-1.0, 0.0), // negative y direction
        vec3( 0.0, 0.0, 1.0), // positive z direction
        vec3( 0.0, 0.0,-1.0), // negative
